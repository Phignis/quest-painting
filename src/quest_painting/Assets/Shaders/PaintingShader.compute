// kernel is the function to reference with id, in order to compile and execute it
#pragma kernel PaintTexture

// set it with cs.SetTexture
RWTexture2D<float4> TextureToTransform; // texture on which shader will operate, RandomWrite is enable to modify it

// set it with cs.SetVector
float4 ColorToPaint; // color the pixels will be set to

// set it with cs.SetInts
uint2 PixelCoordApplyPoint; // origin from where we apply offset to determine the pixel to modify

uint2 NumberPixelToChange; // represent how many pixel will be set on x and y, to apply negative offset, and center the painting on origin

float FadingPaint; // represent a bias for the fading, from 0 to 1, 1 will not paint at all

[numthreads(8,8,1)]
void PaintTexture(uint3 id : SV_DispatchThreadID) // SV_DispatchThreadID is a semantic meaning that it will return the exact thread id 
{
    uint2 pixelToChangeColor = PixelCoordApplyPoint;
    float2 pixelOffset = { id.x - (NumberPixelToChange.x / 2.0f), id.y - (float) (NumberPixelToChange.y / 2.0f) };
    pixelToChangeColor.x += pixelOffset.x;
    pixelToChangeColor.y += pixelOffset.y;
    
    uint maxOffset = (NumberPixelToChange.x / 2) + (NumberPixelToChange.y / 2);
    float offsetPercent = (abs(pixelOffset.x) + abs(pixelOffset.y)) / maxOffset;
    
    float initialCoeff = offsetPercent + FadingPaint;
    if (initialCoeff > 1.0f)
        initialCoeff = 1.0f;
    float toPaintCoeff = 1 - offsetPercent - FadingPaint;
    if (toPaintCoeff < 0.0f)
        toPaintCoeff = 0.0f;
    
    float4 finalColorApplied = initialCoeff * TextureToTransform[pixelToChangeColor] + toPaintCoeff * ColorToPaint;
    TextureToTransform[pixelToChangeColor] = finalColorApplied;
}
