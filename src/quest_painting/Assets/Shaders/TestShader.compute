// kernel is the function to reference with id, to compile and execute it
#pragma kernel PaintTexture

// Create a RenderTexture with enableRandomWrite flag (RW) and set it
// with cs.SetTexture
RWTexture2D<float4> TextureToTransform; // texture on which shader will operate

// set it with cs.SetVector
float4 ColorToPaint; // color in which the pixels will be set

// set it with cs.SetInts
uint2 PixelCoordApplyPoint; // origin from where we apply offset to determine the pixel to modify

uint2 NumberPixelToChange; // give away the information of how many pixel will be set on x and y, to apply negative offset

[numthreads(8,8,1)]
void PaintTexture(uint3 id : SV_DispatchThreadID) // SV_DispatchThreadID is a semantic meaning that it will return the exact thread id 
{
    uint width, height;
    TextureToTransform.GetDimensions(width, height);
    uint2 pixelToChangeColor = PixelCoordApplyPoint;
    pixelToChangeColor.x += id.x - (NumberPixelToChange.x / 2);
    pixelToChangeColor.y += id.y - (NumberPixelToChange.y / 2);
    
    TextureToTransform[pixelToChangeColor] = ColorToPaint;
}
